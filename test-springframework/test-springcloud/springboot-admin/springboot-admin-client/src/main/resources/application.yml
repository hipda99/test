spring:
  application:
    name: springcloud-admin-client
  boot:
    admin:
      client:
        #springboot admin client连接 spring boot admin server 端点地址
        url: http://localhost:18099
        instance:
          #默认使用的是主机名注册，改为使用ip注册
          prefer-ip: true
        username: admin
        password: 123456

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    #客户端每隔30秒从Eureka服务上更新一次服务信息
    registry-fetch-interval-seconds: 30
    #需要将我的服务注册到eureka上
    register-with-eureka: true
    #需要检索服务
    fetch-registry: true
  #心跳检测检测与续约时间
  instance:
    #告诉服务端，如果我10s之内没有给你发心跳，就代表我故障了，将我剔除掉，默认90s
    #Eureka服务端在收到最后一次心跳之后等待的时间上限，单位为秒，超过则剔除（客户端告诉服务端按照此规则等待自己）
    lease-expiration-duration-in-seconds: 10
    #每隔2s向服务端发送一次心跳，证明自已依然活着，默认30s
    #Eureka客户端向服务端发送心跳的时间间隔，单位为秒（客户端告诉服务端自己会按照该规则）
    lease-renewal-interval-in-seconds: 2
    # 启用ip配置 这样在注册中心列表中看见的是以ip+端口呈现的
    prefer-ip-address: true
    # 实例名称  最后呈现地址：ip:2002
    instance-id: ${spring.cloud.client.ip-address}:${server.port}
    health-check-url-path: /actuator/health
 
   #Eureka 中的 metadataMap 是专门用来存放一些自定义的数据，
   # 当注册中心或者其他服务需要此服务的某些配置时可以在 metadataMap 里取。
   # 实际上，每个 instance 都有各自的 metadataMap，map 中存放着需要用到的属性。
   # 例如，上面配置中的 eureka.instance.metadata-map.username，当这个服务成功注册到 Eureka 上，
   # Spring Boot Admin 就会取拿到这个 instance，进而拿到 metadataMap 里的属性，
   # 然后放入请求头，向此服务发送请求，访问此服务的 Actuator 开放的端点。
   #说白了，这个为了连接到自己,把密码告诉eureka，spring boot admin server 拿着密码去连接客户端应用，监控信息
    metadata-map:
      user.name: ${spring.security.user.name}
      user.password: ${spring.security.user.password}