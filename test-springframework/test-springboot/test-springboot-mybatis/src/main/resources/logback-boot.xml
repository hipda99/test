<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	根节点<configuration>包含的属性
	scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
	scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单
	位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
	debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行
	状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!-- 
		设置上下文名称：<contextName>
		每个logger都关联到logger上下文，默认上下文名称为“default”。但可以使
		用<contextName>设置成其他名字，用于区分不同应用程序的记录。一旦设置，
		不能修改。（并没有感觉有什么作用呢）
	 -->        
    <contextName>myTestAppName</contextName>
    
	<!-- 
		设置变量：<property>
		用来定义变量值的标签，<property> 有两个属性，name和value；其中name的值是变
		量的名称，value的值时变量定义的值。通过<property>定义的值会被插入到logger上
		下文中。定义变量后，可以使“${}”来使用变量。
		例如使用<property>定义上下文名称，然后在<contentName>设置logger上下文时使用。
	 -->
	<property name="app_name" value="myAppName" />
	<!-- <contextName>${app_name}</contextName> -->
	
    <!-- 
    	获取时间戳字符串：<timestamp>
		两个属性 key:标识此<timestamp> 的名字；datePattern：设置将当前时
		间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。
        例如将解析配置文件的时间作为上下文名称：
     -->
    <timestamp key="bySecond" datePattern="yyyyMMdd'T'HHmmss"/>
    <!-- <contextName>${bySecond}</contextName> -->
    
    <!-- 
		<appender>是<configuration>的子节点，是负责写日志的组件。
		
		<appender>有两个必要属性name和class。name指定appender名称，class指定appender的全限定名。
  	 -->
  	 
  	<!-- 
  		ch.qos.logback.core.ConsoleAppender：把日志写到控制台 
  		
  		<encoder>：对日志进行格式化。（具体参数稍后讲解 ）
		<target>：字符串 System.out 或者 System.err ，默认 System.out ；
  	-->
	<appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
    	<encoder>
      		<pattern>%-4relative [%thread] %-5level %logger{35} - %msg %n</pattern>
    	</encoder>
  	</appender>
  	<!--  
  		ch.qos.logback.core.FileAppender：把日志写入到文件

		<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在
		会自动创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默
		认是true。
		<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
		<prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在
		向此文件做写入操作，效率低，默认是 false。
  	-->
  	<appender name="FILE" class="ch.qos.logback.core.FileAppender">
    	<file>log/logFile.%d{yyyy-MM-dd}.log</file>
    	<append>true</append>
    	<encoder>
      		<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
    	</encoder>
  	</appender>
  	<!-- 
  		ch.qos.logback.core.rolling.RollingFileAppender：先将日志记录到指定文件，当符
  		合某个条件时，将日志记录到其他文件。

		<file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动
		创建，没有默认值。
		<append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。
		<encoder>：对记录事件进行格式化。（具体参数稍后讲解 ）
		<rollingPolicy>:当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名。
		<triggeringPolicy >: 告知 RollingFileAppender 何时激活滚动。
		<prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，
		但是有两个限制，1不支持也不允许文件压缩，2不能设置file属性，必须留空。
  	-->
  	<appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender"> 
    	<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy"> 
      		<fileNamePattern>logFile.%d{yyyy-MM-dd}.log</fileNamePattern> 
      		<maxHistory>30</maxHistory>  
    	</rollingPolicy> 

	    <encoder> 
    		<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern> 
    	</encoder> 
	</appender> 
  	
    <!-- 
    	设置logger节点：<logger>
    	用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。
    	
    	<logger>仅有一个name属性，一个可选的level和一个可选的additivity属性。
    	name:用来指定受此loger约束的某一个包或者具体的某一个类。
    	level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
    	还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那
    	么当前loger将会继承上级的级别。各个节点中的level的优先级：root<append<loger。
    	additivity:是否向上级logger传递打印信息。默认是true。
    	
    	<logger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
    	
    	实践总结：当<logger>中包含<appender-ref>时，如果additivity=true，则会将打印信息传递
    	到root；当additivity=true时，如果logger和root输出到同一个位置，日志会重复；如果
    	additivity=false，则只会在<logger>中<appender-ref>打印信息，不会向上传递
     -->
    <logger name="com.zaumal.test.devtools.service.Test1Service" level="ERROR" additivity="false">
		<appender-ref ref="STDOUT" />
	</logger>
	<logger name="com.zaumal.test.devtools.service.Test2Service" level="WARN">
		<appender-ref ref="FILE" />
	</logger> 
    
	<!-- 
		设置root节点：<root>
		
		也是<loger>元素，但是它是根loger。只有一个level属性，因应已经有默认的name为"root".
		level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，
		不能设置为INHERITED或者同义词NULL。默认是DEBUG。
		
		<root>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。
	 -->
	<root level="INFO">
    	<appender-ref ref="STDOUT" /> 
  	</root>
</configuration> 
